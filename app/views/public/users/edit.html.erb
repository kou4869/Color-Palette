<div class="user_edit">
  <div class="container-fluid px-5">

    <div class="row">
      <div class="col-12 col-md-2 mt-3 pr-5">
        <h2>User info</h2>
        <%= render 'public/users/public_sidebar', user: @user %>
      </div>

      <div class="col-12 col-md-10">
        <%= form_with model: @user, url: user_information_path(@user), method: :patch do |user| %>
          <div class="row edit_text">
            <div class="col-12 col-md-5 mx-2">
              <div class="form-group">
                <b><%= user.label :name %></b>
                <%= user.text_field :name, class: "form-control" %>
              </div>

              <div class="form-group">
                <b><%= user.label :introduction %></b>
                <%= user.text_area :introduction, class: "form-control", rows: "3", placeholder: "自己紹介を入力してください" %>
              </div>
            </div>

            <div class="col-12 col-md-6 mx-2">
              <div class="form-group">
                <b><%= user.label :image %></b>
                <%= user.file_field :profile_image, class: "form-control-file user_image", accept: 'image/*' %>
              </div>

              <div id="update_profile_image"></div>

              <div class="form-group text-right pt-2 pr-3">
                <%= user.submit class: 'btn btn-success' %>
                <span class="pl-5">
                  <%= link_to user_quit_path(@user), class: "btn btn-outline-dark" do %>
                    退会手続き
                  <% end %>
                </span>
              </div>

            </div>
          </div>
        <% end %>
      </div>

    </div>  
      
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {  // HTMLが最初に読み込まれたときに作動する関数を定義
    const createImageHTML = (blob) => {  // createImageHTMLの作成
      const imageElement = document.getElementById('update_profile_image');  // getElementByIdでnew.html.erbに先ほど追加したdiv要素のid('update_profile_image')を取得
      const blobImage = document.createElement('img');  // createElementメソッドでHTML要素の「img」を作成し、blobImageに格納
      blobImage.setAttribute('class', 'edit-img')  // setAttributeでclassとsrcをimgに付与。(classを付与しているのはCSSを当てるため)
      blobImage.setAttribute('src', blob);
      imageElement.appendChild(blobImage);  // appendChildメソッドを使ってhtml.erbに追加したdiv要素の中にimg要素を入れる
    };
  
  //   ↓ ('user_profile_image')はアプリケーションのデベロッパーツールで確認したid
    document.getElementById('user_profile_image').addEventListener('change', (e) =>{
  //   ↑ 投稿フォームのファイル選択ボックスに変化（change）が起こったときに行われる処理を記述
  //   ↑ アロー関数の「e」はgetElementByIdで取得した投稿フォームのファイル選択ボックスの中身になる
        const imageContent = document.querySelector('img'); 
        if (imageContent){ 
          imageContent.remove(); 
        } 
  
      const file = e.target.files[0];
  //     ↑ e.target.files[0]で取得したファイルの情報を定数fileに格納し、URL.createObjectURL(file)で取得した情報を文字列に変換し、定数blobに格納
      const blob = window.URL.createObjectURL(file);
      createImageHTML(blob);
    });
    
  })
 </script>

