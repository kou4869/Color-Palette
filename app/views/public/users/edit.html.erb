<div class="user_edit">
  <div class="container-fluid px-5">

    <div class="row">
      <div class="col-12 col-md-2 mt-4 pr-5">
        <h2 class="user_title text-center">User info</h2>
        <div class="text-center pt-2">
          <%= image_tag @user.get_profile_image, width: 120 %>
        </div>
        <% if @user.id == current_user.id %>
          <div class="text-center mt-2">
            <%= link_to user_information_edit_path(@user), class: "btn btn-outline-success btn-sm", data: {turbolinks: false} do %>
              プロフィール<br>編集
            <% end %>
          </div>
        <% end %>
        
        <table class="table mt-2">
          <tr>
            <td>
              <b>name</b><br>
              <%= @user.name_was %>
              </td>
          </tr>
          <tr>
            <td>
              <b>introduction</b><br>
              <%= safe_join(@user.introduction_was.split("\n"),tag(:br)) %>
            </td>
          </tr>
          <% if @user.favorites.any? %>
            <tr>
              <td class="text-center">
                <%= link_to user_like_path(@user) do %>
                  <span style="color: #7b68ee">
                    <i class="fas fa-book-reader"></i> ブックマーク <i class="fas fa-book-reader"></i>
                  </span>
                <% end %>
              </td>
            </tr>
          <% end %>
          <% if @user.posts.any? %>
            <tr>
              <td class="text-center">
                <%= link_to user_my_page_path(@user) do %>
                  <span style="color: #7b68ee">
                    <i class="fas fa-pen-nib"></i> 投稿作品 <i class="fas fa-pen-nib"></i>
                  </span>
                <% end %>
              </td>
            </tr>
          <% end %>
        </table>
      </div>

      <div class="col-12 col-md-10">
        <h2 class="font_kaushan mt-3"><strong>【 ユーザー情報編集 】</strong></h2>
        <p class="edit_name pt-3 pl-4">
          name(ニックネーム)はサイト全体に公開されます。<br>
          2文字以上、10文字以内でご入力ください。
        </p>

        <% if flash[:error] %>
          <div class="alert alert-danger">
            <% @user.errors.full_messages.each do |message| %>
              <li>
                <%= message %>
              </li>
            <% end %>
          </div>
        <% else %>
          <!--何も表示しない-->
        <% end %>

        <%= form_with model: @user, url: user_information_path(@user), method: :patch do |user| %>
          <div class="row edit_text">
            <div class="col-12 col-md-5 mx-2">
              <div class="form-group">
                <b><%= user.label :name %></b>
                <%= user.text_field :name, class: "form-control" %>
              </div>

              <div class="form-group">
                <b><%= user.label :introduction %></b>
                <%= user.text_area :introduction, class: "form-control", rows: "3", placeholder: "自己紹介を50文字以内でご入力してください" %>
              </div>
            </div>

            <div class="col-12 col-md-6 mx-2">
              <div class="form-group">
                <b><%= user.label :image %></b>
                <%= user.file_field :profile_image, class: "form-control-file user_image", accept: 'image/*' %>
              </div>

              <div id="update_profile_image"></div>

              <div class="form-group text-right py-2 pr-3">
                <%= user.submit class: 'btn btn-success' %>
                <span class="pl-5">
                  <%= link_to user_quit_path(@user), class: "btn btn-outline-dark" do %>
                    退会手続き
                  <% end %>
                </span>
              </div>

            </div>
          </div>
        <% end %>
      </div>

    </div>

    <!--↓ トップに戻る用のid-->
    <a href="#" id="page_top"></a>

  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {  // HTMLが最初に読み込まれたときに作動する関数を定義
    const createImageHTML = (blob) => {  // createImageHTMLの作成
      const imageElement = document.getElementById('update_profile_image');  // getElementByIdでnew.html.erbに先ほど追加したdiv要素のid('update_profile_image')を取得
      const blobImage = document.createElement('img');  // createElementメソッドでHTML要素の「img」を作成し、blobImageに格納
      blobImage.setAttribute('class', 'edit-img')  // setAttributeでclassとsrcをimgに付与。(classを付与しているのはCSSを当てるため)
      blobImage.setAttribute('src', blob);
      imageElement.appendChild(blobImage);  // appendChildメソッドを使ってhtml.erbに追加したdiv要素の中にimg要素を入れる
    };

  //   ↓ ('user_profile_image')はアプリケーションのデベロッパーツールで確認したid
    document.getElementById('user_profile_image').addEventListener('change', (e) =>{
  //   ↑ 投稿フォームのファイル選択ボックスに変化（change）が起こったときに行われる処理を記述
  //   ↑ アロー関数の「e」はgetElementByIdで取得した投稿フォームのファイル選択ボックスの中身になる
        const imageContent = document.querySelector('img');
        if (imageContent){
          imageContent.remove();
        }

      const file = e.target.files[0];
  //     ↑ e.target.files[0]で取得したファイルの情報を定数fileに格納し、URL.createObjectURL(file)で取得した情報を文字列に変換し、定数blobに格納
      const blob = window.URL.createObjectURL(file);
      createImageHTML(blob);
    });

  })
 </script>

